<?php

/**
* Implementation of hook_views_api().
*/
function xmlsitemap_user_views_api() {
  return array(
    'api' => 3,
    'path' => drupal_get_path('module', 'xmlsitemap_user') . '/views',
  );
}

/**
 * Implements hook_form_alter().
 */
function xmlsitemap_user_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'views_form_xmlsitemap_user_page':
      if (isset($form['script'])) {
        // Attach css.
        $form['#attached']['css'] = array(drupal_get_path('module', 'xmlsitemap_user') . '/theme/xmlsitemap_user.css');

        // Set a default value.
        $form['script']['#default_value'] = '_user_regenerate_sitemap_link($entity);';
      }
      break;
  }
}

/**
 * @param
 *    $account: Pass the user object.
 *    $status: Use $status if not empty. Otherwise, use the $account->status
 *
 * @todo
 *    Generate a sitemap xml link based on the $entity
 */
function _user_regenerate_sitemap_link($account, $status = NULL) {
  // Load account object.
  $account = user_load($account->uid);

  $sorted[$account->uid] = array(
    'type'        => 'user',
    'subtype'     => 'xmlsitemap_user',
    'id'          => $account->uid,
    'loc'         => 'user/' . $account->uid,
    // Status will be based on account status.
    'status'      => empty($status) ? $account->status : $status,
    // Access will be based on account status.
    'access'      => $account->status,
    'lastmod'     => time(),
    'changefreq'  => 0,
    'priority'    => 0.5,
  );

  xmlsitemap_link_save($sorted[$account->uid]);
}